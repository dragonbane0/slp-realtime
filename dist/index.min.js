"use strict";
function e(e) {
  return e && "object" == typeof e && "default" in e ? e.default : e;
}
Object.defineProperty(exports, "__esModule", { value: !0 });
var t = require("rxjs"),
  r = require("lodash"),
  n = require("@slippi/slippi-js"),
  o = require("child_process"),
  s = e(require("os")),
  i = require("stream"),
  a = e(require("fs")),
  c = e(require("chokidar")),
  u = e(require("path")),
  p = e(require("tailstream")),
  l = function (e, t) {
    return (
      (l =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (e, t) {
            e.__proto__ = t;
          }) ||
        function (e, t) {
          for (var r in t) t.hasOwnProperty(r) && (e[r] = t[r]);
        }),
      l(e, t)
    );
  };
function h(e, t) {
  function r() {
    this.constructor = e;
  }
  l(e, t), (e.prototype = null === t ? Object.create(t) : ((r.prototype = t.prototype), new r()));
}
function f(e) {
  return "function" == typeof e;
}
var d = !1,
  m = {
    Promise: void 0,
    set useDeprecatedSynchronousErrorHandling(e) {
      e && new Error().stack;
      d = e;
    },
    get useDeprecatedSynchronousErrorHandling() {
      return d;
    },
  };
function b(e) {
  setTimeout(function () {
    throw e;
  }, 0);
}
var y = {
    closed: !0,
    next: function (e) {},
    error: function (e) {
      if (m.useDeprecatedSynchronousErrorHandling) throw e;
      b(e);
    },
    complete: function () {},
  },
  v = (function () {
    return (
      Array.isArray ||
      function (e) {
        return e && "number" == typeof e.length;
      }
    );
  })();
function _(e) {
  return null !== e && "object" == typeof e;
}
var S = (function () {
    function e(e) {
      return (
        Error.call(this),
        (this.message = e
          ? e.length +
            " errors occurred during unsubscription:\n" +
            e
              .map(function (e, t) {
                return t + 1 + ") " + e.toString();
              })
              .join("\n  ")
          : ""),
        (this.name = "UnsubscriptionError"),
        (this.errors = e),
        this
      );
    }
    return (e.prototype = Object.create(Error.prototype)), e;
  })(),
  E = (function () {
    function e(e) {
      (this.closed = !1), (this._parentOrParents = null), (this._subscriptions = null), e && (this._unsubscribe = e);
    }
    return (
      (e.prototype.unsubscribe = function () {
        var t;
        if (!this.closed) {
          var r = this,
            n = r._parentOrParents,
            o = r._unsubscribe,
            s = r._subscriptions;
          if (((this.closed = !0), (this._parentOrParents = null), (this._subscriptions = null), n instanceof e))
            n.remove(this);
          else if (null !== n)
            for (var i = 0; i < n.length; ++i) {
              n[i].remove(this);
            }
          if (f(o))
            try {
              o.call(this);
            } catch (e) {
              t = e instanceof S ? x(e.errors) : [e];
            }
          if (v(s)) {
            i = -1;
            for (var a = s.length; ++i < a; ) {
              var c = s[i];
              if (_(c))
                try {
                  c.unsubscribe();
                } catch (e) {
                  (t = t || []), e instanceof S ? (t = t.concat(x(e.errors))) : t.push(e);
                }
            }
          }
          if (t) throw new S(t);
        }
      }),
      (e.prototype.add = function (t) {
        var r = t;
        if (!t) return e.EMPTY;
        switch (typeof t) {
          case "function":
            r = new e(t);
          case "object":
            if (r === this || r.closed || "function" != typeof r.unsubscribe) return r;
            if (this.closed) return r.unsubscribe(), r;
            if (!(r instanceof e)) {
              var n = r;
              (r = new e())._subscriptions = [n];
            }
            break;
          default:
            throw new Error("unrecognized teardown " + t + " added to Subscription.");
        }
        var o = r._parentOrParents;
        if (null === o) r._parentOrParents = this;
        else if (o instanceof e) {
          if (o === this) return r;
          r._parentOrParents = [o, this];
        } else {
          if (-1 !== o.indexOf(this)) return r;
          o.push(this);
        }
        var s = this._subscriptions;
        return null === s ? (this._subscriptions = [r]) : s.push(r), r;
      }),
      (e.prototype.remove = function (e) {
        var t = this._subscriptions;
        if (t) {
          var r = t.indexOf(e);
          -1 !== r && t.splice(r, 1);
        }
      }),
      (e.EMPTY = (function (e) {
        return (e.closed = !0), e;
      })(new e())),
      e
    );
  })();
function x(e) {
  return e.reduce(function (e, t) {
    return e.concat(t instanceof S ? t.errors : t);
  }, []);
}
var I = (function () {
    return "function" == typeof Symbol ? Symbol("rxSubscriber") : "@@rxSubscriber_" + Math.random();
  })(),
  A = (function (e) {
    function t(r, n, o) {
      var s = e.call(this) || this;
      switch (
        ((s.syncErrorValue = null),
        (s.syncErrorThrown = !1),
        (s.syncErrorThrowable = !1),
        (s.isStopped = !1),
        arguments.length)
      ) {
        case 0:
          s.destination = y;
          break;
        case 1:
          if (!r) {
            s.destination = y;
            break;
          }
          if ("object" == typeof r) {
            r instanceof t
              ? ((s.syncErrorThrowable = r.syncErrorThrowable), (s.destination = r), r.add(s))
              : ((s.syncErrorThrowable = !0), (s.destination = new C(s, r)));
            break;
          }
        default:
          (s.syncErrorThrowable = !0), (s.destination = new C(s, r, n, o));
      }
      return s;
    }
    return (
      h(t, e),
      (t.prototype[I] = function () {
        return this;
      }),
      (t.create = function (e, r, n) {
        var o = new t(e, r, n);
        return (o.syncErrorThrowable = !1), o;
      }),
      (t.prototype.next = function (e) {
        this.isStopped || this._next(e);
      }),
      (t.prototype.error = function (e) {
        this.isStopped || ((this.isStopped = !0), this._error(e));
      }),
      (t.prototype.complete = function () {
        this.isStopped || ((this.isStopped = !0), this._complete());
      }),
      (t.prototype.unsubscribe = function () {
        this.closed || ((this.isStopped = !0), e.prototype.unsubscribe.call(this));
      }),
      (t.prototype._next = function (e) {
        this.destination.next(e);
      }),
      (t.prototype._error = function (e) {
        this.destination.error(e), this.unsubscribe();
      }),
      (t.prototype._complete = function () {
        this.destination.complete(), this.unsubscribe();
      }),
      (t.prototype._unsubscribeAndRecycle = function () {
        var e = this._parentOrParents;
        return (
          (this._parentOrParents = null),
          this.unsubscribe(),
          (this.closed = !1),
          (this.isStopped = !1),
          (this._parentOrParents = e),
          this
        );
      }),
      t
    );
  })(E),
  C = (function (e) {
    function t(t, r, n, o) {
      var s,
        i = e.call(this) || this;
      i._parentSubscriber = t;
      var a = i;
      return (
        f(r)
          ? (s = r)
          : r &&
            ((s = r.next),
            (n = r.error),
            (o = r.complete),
            r !== y &&
              (f((a = Object.create(r)).unsubscribe) && i.add(a.unsubscribe.bind(a)),
              (a.unsubscribe = i.unsubscribe.bind(i)))),
        (i._context = a),
        (i._next = s),
        (i._error = n),
        (i._complete = o),
        i
      );
    }
    return (
      h(t, e),
      (t.prototype.next = function (e) {
        if (!this.isStopped && this._next) {
          var t = this._parentSubscriber;
          m.useDeprecatedSynchronousErrorHandling && t.syncErrorThrowable
            ? this.__tryOrSetError(t, this._next, e) && this.unsubscribe()
            : this.__tryOrUnsub(this._next, e);
        }
      }),
      (t.prototype.error = function (e) {
        if (!this.isStopped) {
          var t = this._parentSubscriber,
            r = m.useDeprecatedSynchronousErrorHandling;
          if (this._error)
            r && t.syncErrorThrowable
              ? (this.__tryOrSetError(t, this._error, e), this.unsubscribe())
              : (this.__tryOrUnsub(this._error, e), this.unsubscribe());
          else if (t.syncErrorThrowable)
            r ? ((t.syncErrorValue = e), (t.syncErrorThrown = !0)) : b(e), this.unsubscribe();
          else {
            if ((this.unsubscribe(), r)) throw e;
            b(e);
          }
        }
      }),
      (t.prototype.complete = function () {
        var e = this;
        if (!this.isStopped) {
          var t = this._parentSubscriber;
          if (this._complete) {
            var r = function () {
              return e._complete.call(e._context);
            };
            m.useDeprecatedSynchronousErrorHandling && t.syncErrorThrowable
              ? (this.__tryOrSetError(t, r), this.unsubscribe())
              : (this.__tryOrUnsub(r), this.unsubscribe());
          } else this.unsubscribe();
        }
      }),
      (t.prototype.__tryOrUnsub = function (e, t) {
        try {
          e.call(this._context, t);
        } catch (e) {
          if ((this.unsubscribe(), m.useDeprecatedSynchronousErrorHandling)) throw e;
          b(e);
        }
      }),
      (t.prototype.__tryOrSetError = function (e, t, r) {
        if (!m.useDeprecatedSynchronousErrorHandling) throw new Error("bad call");
        try {
          t.call(this._context, r);
        } catch (t) {
          return m.useDeprecatedSynchronousErrorHandling
            ? ((e.syncErrorValue = t), (e.syncErrorThrown = !0), !0)
            : (b(t), !0);
        }
        return !1;
      }),
      (t.prototype._unsubscribe = function () {
        var e = this._parentSubscriber;
        (this._context = null), (this._parentSubscriber = null), e.unsubscribe();
      }),
      t
    );
  })(A),
  D = (function (e) {
    function t() {
      return (null !== e && e.apply(this, arguments)) || this;
    }
    return (
      h(t, e),
      (t.prototype.notifyNext = function (e, t, r, n, o) {
        this.destination.next(t);
      }),
      (t.prototype.notifyError = function (e, t) {
        this.destination.error(e);
      }),
      (t.prototype.notifyComplete = function (e) {
        this.destination.complete();
      }),
      t
    );
  })(A),
  g = (function (e) {
    function t(t, r, n) {
      var o = e.call(this) || this;
      return (o.parent = t), (o.outerValue = r), (o.outerIndex = n), (o.index = 0), o;
    }
    return (
      h(t, e),
      (t.prototype._next = function (e) {
        this.parent.notifyNext(this.outerValue, e, this.outerIndex, this.index++, this);
      }),
      (t.prototype._error = function (e) {
        this.parent.notifyError(e, this), this.unsubscribe();
      }),
      (t.prototype._complete = function () {
        this.parent.notifyComplete(this), this.unsubscribe();
      }),
      t
    );
  })(A);
function w() {
  return "function" == typeof Symbol && Symbol.iterator ? Symbol.iterator : "@@iterator";
}
var T = w(),
  R = (function () {
    return ("function" == typeof Symbol && Symbol.observable) || "@@observable";
  })(),
  M = function (e) {
    return e && "number" == typeof e.length && "function" != typeof e;
  };
function P(e) {
  return !!e && "function" != typeof e.subscribe && "function" == typeof e.then;
}
var F = function (e) {
  if (e && "function" == typeof e[R])
    return (
      (o = e),
      function (e) {
        var t = o[R]();
        if ("function" != typeof t.subscribe)
          throw new TypeError("Provided object does not correctly implement Symbol.observable");
        return t.subscribe(e);
      }
    );
  if (M(e))
    return (
      (n = e),
      function (e) {
        for (var t = 0, r = n.length; t < r && !e.closed; t++) e.next(n[t]);
        e.complete();
      }
    );
  if (P(e))
    return (
      (r = e),
      function (e) {
        return (
          r
            .then(
              function (t) {
                e.closed || (e.next(t), e.complete());
              },
              function (t) {
                return e.error(t);
              },
            )
            .then(null, b),
          e
        );
      }
    );
  if (e && "function" == typeof e[T])
    return (
      (t = e),
      function (e) {
        for (var r = t[T](); ; ) {
          var n = r.next();
          if (n.done) {
            e.complete();
            break;
          }
          if ((e.next(n.value), e.closed)) break;
        }
        return (
          "function" == typeof r.return &&
            e.add(function () {
              r.return && r.return();
            }),
          e
        );
      }
    );
  var t,
    r,
    n,
    o,
    s = _(e) ? "an invalid object" : "'" + e + "'";
  throw new TypeError(
    "You provided " + s + " where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.",
  );
};
function O() {}
function N(e) {
  return e
    ? 1 === e.length
      ? e[0]
      : function (t) {
          return e.reduce(function (e, t) {
            return t(e);
          }, t);
        }
    : O;
}
var L = (function () {
  function e(e) {
    (this._isScalar = !1), e && (this._subscribe = e);
  }
  return (
    (e.prototype.lift = function (t) {
      var r = new e();
      return (r.source = this), (r.operator = t), r;
    }),
    (e.prototype.subscribe = function (e, t, r) {
      var n = this.operator,
        o = (function (e, t, r) {
          if (e) {
            if (e instanceof A) return e;
            if (e[I]) return e[I]();
          }
          return e || t || r ? new A(e, t, r) : new A(y);
        })(e, t, r);
      if (
        (n
          ? o.add(n.call(o, this.source))
          : o.add(
              this.source || (m.useDeprecatedSynchronousErrorHandling && !o.syncErrorThrowable)
                ? this._subscribe(o)
                : this._trySubscribe(o),
            ),
        m.useDeprecatedSynchronousErrorHandling &&
          o.syncErrorThrowable &&
          ((o.syncErrorThrowable = !1), o.syncErrorThrown))
      )
        throw o.syncErrorValue;
      return o;
    }),
    (e.prototype._trySubscribe = function (e) {
      try {
        return this._subscribe(e);
      } catch (t) {
        m.useDeprecatedSynchronousErrorHandling && ((e.syncErrorThrown = !0), (e.syncErrorValue = t)),
          !(function (e) {
            for (; e; ) {
              var t = e,
                r = t.closed,
                n = t.destination,
                o = t.isStopped;
              if (r || o) return !1;
              e = n && n instanceof A ? n : null;
            }
            return !0;
          })(e)
            ? console.warn(t)
            : e.error(t);
      }
    }),
    (e.prototype.forEach = function (e, t) {
      var r = this;
      return new (t = B(t))(function (t, n) {
        var o;
        o = r.subscribe(
          function (t) {
            try {
              e(t);
            } catch (e) {
              n(e), o && o.unsubscribe();
            }
          },
          n,
          t,
        );
      });
    }),
    (e.prototype._subscribe = function (e) {
      var t = this.source;
      return t && t.subscribe(e);
    }),
    (e.prototype[R] = function () {
      return this;
    }),
    (e.prototype.pipe = function () {
      for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
      return 0 === e.length ? this : N(e)(this);
    }),
    (e.prototype.toPromise = function (e) {
      var t = this;
      return new (e = B(e))(function (e, r) {
        var n;
        t.subscribe(
          function (e) {
            return (n = e);
          },
          function (e) {
            return r(e);
          },
          function () {
            return e(n);
          },
        );
      });
    }),
    (e.create = function (t) {
      return new e(t);
    }),
    e
  );
})();
function B(e) {
  if ((e || (e = Promise), !e)) throw new Error("no Promise impl found");
  return e;
}
function k(e, t, r, n, o) {
  if ((void 0 === o && (o = new g(e, r, n)), !o.closed)) return t instanceof L ? t.subscribe(o) : F(t)(o);
}
function G(e, t) {
  if (null != e) {
    if (
      (function (e) {
        return e && "function" == typeof e[R];
      })(e)
    )
      return (function (e, t) {
        return new L(function (r) {
          var n = new E();
          return (
            n.add(
              t.schedule(function () {
                var o = e[R]();
                n.add(
                  o.subscribe({
                    next: function (e) {
                      n.add(
                        t.schedule(function () {
                          return r.next(e);
                        }),
                      );
                    },
                    error: function (e) {
                      n.add(
                        t.schedule(function () {
                          return r.error(e);
                        }),
                      );
                    },
                    complete: function () {
                      n.add(
                        t.schedule(function () {
                          return r.complete();
                        }),
                      );
                    },
                  }),
                );
              }),
            ),
            n
          );
        });
      })(e, t);
    if (P(e))
      return (function (e, t) {
        return new L(function (r) {
          var n = new E();
          return (
            n.add(
              t.schedule(function () {
                return e.then(
                  function (e) {
                    n.add(
                      t.schedule(function () {
                        r.next(e),
                          n.add(
                            t.schedule(function () {
                              return r.complete();
                            }),
                          );
                      }),
                    );
                  },
                  function (e) {
                    n.add(
                      t.schedule(function () {
                        return r.error(e);
                      }),
                    );
                  },
                );
              }),
            ),
            n
          );
        });
      })(e, t);
    if (M(e))
      return (function (e, t) {
        return new L(function (r) {
          var n = new E(),
            o = 0;
          return (
            n.add(
              t.schedule(function () {
                o !== e.length ? (r.next(e[o++]), r.closed || n.add(this.schedule())) : r.complete();
              }),
            ),
            n
          );
        });
      })(e, t);
    if (
      (function (e) {
        return e && "function" == typeof e[T];
      })(e) ||
      "string" == typeof e
    )
      return (function (e, t) {
        if (!e) throw new Error("Iterable cannot be null");
        return new L(function (r) {
          var n,
            o = new E();
          return (
            o.add(function () {
              n && "function" == typeof n.return && n.return();
            }),
            o.add(
              t.schedule(function () {
                (n = e[T]()),
                  o.add(
                    t.schedule(function () {
                      if (!r.closed) {
                        var e, t;
                        try {
                          var o = n.next();
                          (e = o.value), (t = o.done);
                        } catch (e) {
                          return void r.error(e);
                        }
                        t ? r.complete() : (r.next(e), this.schedule());
                      }
                    }),
                  );
              }),
            ),
            o
          );
        });
      })(e, t);
  }
  throw new TypeError(((null !== e && typeof e) || e) + " is not observable");
}
function U(e, t) {
  return function (r) {
    if ("function" != typeof e) throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");
    return r.lift(new j(e, t));
  };
}
var j = (function () {
    function e(e, t) {
      (this.project = e), (this.thisArg = t);
    }
    return (
      (e.prototype.call = function (e, t) {
        return t.subscribe(new $(e, this.project, this.thisArg));
      }),
      e
    );
  })(),
  $ = (function (e) {
    function t(t, r, n) {
      var o = e.call(this, t) || this;
      return (o.project = r), (o.count = 0), (o.thisArg = n || o), o;
    }
    return (
      h(t, e),
      (t.prototype._next = function (e) {
        var t;
        try {
          t = this.project.call(this.thisArg, e, this.count++);
        } catch (e) {
          return void this.destination.error(e);
        }
        this.destination.next(t);
      }),
      t
    );
  })(A);
function H(e, t) {
  return function (r) {
    return r.lift(new W(e, t));
  };
}
var W = (function () {
    function e(e, t) {
      (this.compare = e), (this.keySelector = t);
    }
    return (
      (e.prototype.call = function (e, t) {
        return t.subscribe(new Y(e, this.compare, this.keySelector));
      }),
      e
    );
  })(),
  Y = (function (e) {
    function t(t, r, n) {
      var o = e.call(this, t) || this;
      return (o.keySelector = n), (o.hasKey = !1), "function" == typeof r && (o.compare = r), o;
    }
    return (
      h(t, e),
      (t.prototype.compare = function (e, t) {
        return e === t;
      }),
      (t.prototype._next = function (e) {
        var t;
        try {
          var r = this.keySelector;
          t = r ? r(e) : e;
        } catch (e) {
          return this.destination.error(e);
        }
        var n = !1;
        if (this.hasKey)
          try {
            n = (0, this.compare)(this.key, t);
          } catch (e) {
            return this.destination.error(e);
          }
        else this.hasKey = !0;
        n || ((this.key = t), this.destination.next(e));
      }),
      t
    );
  })(A);
function K(e, t) {
  return function (r) {
    return r.lift(new J(e, t));
  };
}
var J = (function () {
    function e(e, t) {
      (this.predicate = e), (this.thisArg = t);
    }
    return (
      (e.prototype.call = function (e, t) {
        return t.subscribe(new V(e, this.predicate, this.thisArg));
      }),
      e
    );
  })(),
  V = (function (e) {
    function t(t, r, n) {
      var o = e.call(this, t) || this;
      return (o.predicate = r), (o.thisArg = n), (o.count = 0), o;
    }
    return (
      h(t, e),
      (t.prototype._next = function (e) {
        var t;
        try {
          t = this.predicate.call(this.thisArg, e, this.count++);
        } catch (e) {
          return void this.destination.error(e);
        }
        t && this.destination.next(e);
      }),
      t
    );
  })(A),
  q = (function () {
    function e() {
      return Error.call(this), (this.message = "object unsubscribed"), (this.name = "ObjectUnsubscribedError"), this;
    }
    return (e.prototype = Object.create(Error.prototype)), e;
  })(),
  X = (function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return (n.subject = t), (n.subscriber = r), (n.closed = !1), n;
    }
    return (
      h(t, e),
      (t.prototype.unsubscribe = function () {
        if (!this.closed) {
          this.closed = !0;
          var e = this.subject,
            t = e.observers;
          if (((this.subject = null), t && 0 !== t.length && !e.isStopped && !e.closed)) {
            var r = t.indexOf(this.subscriber);
            -1 !== r && t.splice(r, 1);
          }
        }
      }),
      t
    );
  })(E),
  Z = (function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return (r.destination = t), r;
    }
    return h(t, e), t;
  })(A),
  z = (function (e) {
    function t() {
      var t = e.call(this) || this;
      return (t.observers = []), (t.closed = !1), (t.isStopped = !1), (t.hasError = !1), (t.thrownError = null), t;
    }
    return (
      h(t, e),
      (t.prototype[I] = function () {
        return new Z(this);
      }),
      (t.prototype.lift = function (e) {
        var t = new Q(this, this);
        return (t.operator = e), t;
      }),
      (t.prototype.next = function (e) {
        if (this.closed) throw new q();
        if (!this.isStopped) for (var t = this.observers, r = t.length, n = t.slice(), o = 0; o < r; o++) n[o].next(e);
      }),
      (t.prototype.error = function (e) {
        if (this.closed) throw new q();
        (this.hasError = !0), (this.thrownError = e), (this.isStopped = !0);
        for (var t = this.observers, r = t.length, n = t.slice(), o = 0; o < r; o++) n[o].error(e);
        this.observers.length = 0;
      }),
      (t.prototype.complete = function () {
        if (this.closed) throw new q();
        this.isStopped = !0;
        for (var e = this.observers, t = e.length, r = e.slice(), n = 0; n < t; n++) r[n].complete();
        this.observers.length = 0;
      }),
      (t.prototype.unsubscribe = function () {
        (this.isStopped = !0), (this.closed = !0), (this.observers = null);
      }),
      (t.prototype._trySubscribe = function (t) {
        if (this.closed) throw new q();
        return e.prototype._trySubscribe.call(this, t);
      }),
      (t.prototype._subscribe = function (e) {
        if (this.closed) throw new q();
        return this.hasError
          ? (e.error(this.thrownError), E.EMPTY)
          : this.isStopped
          ? (e.complete(), E.EMPTY)
          : (this.observers.push(e), new X(this, e));
      }),
      (t.prototype.asObservable = function () {
        var e = new L();
        return (e.source = this), e;
      }),
      (t.create = function (e, t) {
        return new Q(e, t);
      }),
      t
    );
  })(L),
  Q = (function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return (n.destination = t), (n.source = r), n;
    }
    return (
      h(t, e),
      (t.prototype.next = function (e) {
        var t = this.destination;
        t && t.next && t.next(e);
      }),
      (t.prototype.error = function (e) {
        var t = this.destination;
        t && t.error && this.destination.error(e);
      }),
      (t.prototype.complete = function () {
        var e = this.destination;
        e && e.complete && this.destination.complete();
      }),
      (t.prototype._subscribe = function (e) {
        return this.source ? this.source.subscribe(e) : E.EMPTY;
      }),
      t
    );
  })(z);
var ee = (function () {
    function e(e, t, r) {
      void 0 === r && (r = !1), (this.accumulator = e), (this.seed = t), (this.hasSeed = r);
    }
    return (
      (e.prototype.call = function (e, t) {
        return t.subscribe(new te(e, this.accumulator, this.seed, this.hasSeed));
      }),
      e
    );
  })(),
  te = (function (e) {
    function t(t, r, n, o) {
      var s = e.call(this, t) || this;
      return (s.accumulator = r), (s._seed = n), (s.hasSeed = o), (s.index = 0), s;
    }
    return (
      h(t, e),
      Object.defineProperty(t.prototype, "seed", {
        get: function () {
          return this._seed;
        },
        set: function (e) {
          (this.hasSeed = !0), (this._seed = e);
        },
        enumerable: !0,
        configurable: !0,
      }),
      (t.prototype._next = function (e) {
        if (this.hasSeed) return this._tryNext(e);
        (this.seed = e), this.destination.next(e);
      }),
      (t.prototype._tryNext = function (e) {
        var t,
          r = this.index++;
        try {
          t = this.accumulator(this.seed, e, r);
        } catch (e) {
          this.destination.error(e);
        }
        (this.seed = t), this.destination.next(t);
      }),
      t
    );
  })(A);
function re() {
  return function (e) {
    return e.lift(new ne(e));
  };
}
var ne = (function () {
    function e(e) {
      this.connectable = e;
    }
    return (
      (e.prototype.call = function (e, t) {
        var r = this.connectable;
        r._refCount++;
        var n = new oe(e, r),
          o = t.subscribe(n);
        return n.closed || (n.connection = r.connect()), o;
      }),
      e
    );
  })(),
  oe = (function (e) {
    function t(t, r) {
      var n = e.call(this, t) || this;
      return (n.connectable = r), n;
    }
    return (
      h(t, e),
      (t.prototype._unsubscribe = function () {
        var e = this.connectable;
        if (e) {
          this.connectable = null;
          var t = e._refCount;
          if (t <= 0) this.connection = null;
          else if (((e._refCount = t - 1), t > 1)) this.connection = null;
          else {
            var r = this.connection,
              n = e._connection;
            (this.connection = null), !n || (r && n !== r) || n.unsubscribe();
          }
        } else this.connection = null;
      }),
      t
    );
  })(A),
  se = (function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return (n.source = t), (n.subjectFactory = r), (n._refCount = 0), (n._isComplete = !1), n;
    }
    return (
      h(t, e),
      (t.prototype._subscribe = function (e) {
        return this.getSubject().subscribe(e);
      }),
      (t.prototype.getSubject = function () {
        var e = this._subject;
        return (e && !e.isStopped) || (this._subject = this.subjectFactory()), this._subject;
      }),
      (t.prototype.connect = function () {
        var e = this._connection;
        return (
          e ||
            ((this._isComplete = !1),
            (e = this._connection = new E()).add(this.source.subscribe(new ae(this.getSubject(), this))),
            e.closed && ((this._connection = null), (e = E.EMPTY))),
          e
        );
      }),
      (t.prototype.refCount = function () {
        return re()(this);
      }),
      t
    );
  })(L),
  ie = (function () {
    var e = se.prototype;
    return {
      operator: { value: null },
      _refCount: { value: 0, writable: !0 },
      _subject: { value: null, writable: !0 },
      _connection: { value: null, writable: !0 },
      _subscribe: { value: e._subscribe },
      _isComplete: { value: e._isComplete, writable: !0 },
      getSubject: { value: e.getSubject },
      connect: { value: e.connect },
      refCount: { value: e.refCount },
    };
  })(),
  ae = (function (e) {
    function t(t, r) {
      var n = e.call(this, t) || this;
      return (n.connectable = r), n;
    }
    return (
      h(t, e),
      (t.prototype._error = function (t) {
        this._unsubscribe(), e.prototype._error.call(this, t);
      }),
      (t.prototype._complete = function () {
        (this.connectable._isComplete = !0), this._unsubscribe(), e.prototype._complete.call(this);
      }),
      (t.prototype._unsubscribe = function () {
        var e = this.connectable;
        if (e) {
          this.connectable = null;
          var t = e._connection;
          (e._refCount = 0), (e._subject = null), (e._connection = null), t && t.unsubscribe();
        }
      }),
      t
    );
  })(Z);
var ce = (function () {
  function e(e, t) {
    (this.subjectFactory = e), (this.selector = t);
  }
  return (
    (e.prototype.call = function (e, t) {
      var r = this.selector,
        n = this.subjectFactory(),
        o = r(n).subscribe(e);
      return o.add(t.subscribe(n)), o;
    }),
    e
  );
})();
var ue = (function () {
    function e() {}
    return (
      (e.prototype.call = function (e, t) {
        return t.subscribe(new pe(e));
      }),
      e
    );
  })(),
  pe = (function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return (r.hasPrev = !1), r;
    }
    return (
      h(t, e),
      (t.prototype._next = function (e) {
        var t;
        this.hasPrev ? (t = [this.prev, e]) : (this.hasPrev = !0), (this.prev = e), t && this.destination.next(t);
      }),
      t
    );
  })(A);
var le = (function () {
    function e(e) {
      this.notifier = e;
    }
    return (
      (e.prototype.call = function (e, t) {
        return t.subscribe(new he(e, this.notifier, t));
      }),
      e
    );
  })(),
  he = (function (e) {
    function t(t, r, n) {
      var o = e.call(this, t) || this;
      return (o.notifier = r), (o.source = n), (o.sourceIsBeingSubscribedTo = !0), o;
    }
    return (
      h(t, e),
      (t.prototype.notifyNext = function (e, t, r, n, o) {
        (this.sourceIsBeingSubscribedTo = !0), this.source.subscribe(this);
      }),
      (t.prototype.notifyComplete = function (t) {
        if (!1 === this.sourceIsBeingSubscribedTo) return e.prototype.complete.call(this);
      }),
      (t.prototype.complete = function () {
        if (((this.sourceIsBeingSubscribedTo = !1), !this.isStopped)) {
          if ((this.retries || this.subscribeToRetries(), !this.retriesSubscription || this.retriesSubscription.closed))
            return e.prototype.complete.call(this);
          this._unsubscribeAndRecycle(), this.notifications.next();
        }
      }),
      (t.prototype._unsubscribe = function () {
        var e = this.notifications,
          t = this.retriesSubscription;
        e && (e.unsubscribe(), (this.notifications = null)),
          t && (t.unsubscribe(), (this.retriesSubscription = null)),
          (this.retries = null);
      }),
      (t.prototype._unsubscribeAndRecycle = function () {
        var t = this._unsubscribe;
        return (this._unsubscribe = null), e.prototype._unsubscribeAndRecycle.call(this), (this._unsubscribe = t), this;
      }),
      (t.prototype.subscribeToRetries = function () {
        var t;
        this.notifications = new z();
        try {
          t = (0, this.notifier)(this.notifications);
        } catch (t) {
          return e.prototype.complete.call(this);
        }
        (this.retries = t), (this.retriesSubscription = k(this, t));
      }),
      t
    );
  })(D);
function fe() {
  return new z();
}
function de() {
  return function (e) {
    return re()(
      ((t = fe),
      function (e) {
        var n;
        if (
          ((n =
            "function" == typeof t
              ? t
              : function () {
                  return t;
                }),
          "function" == typeof r)
        )
          return e.lift(new ce(n, r));
        var o = Object.create(e, ie);
        return (o.source = e), (o.subjectFactory = n), o;
      })(e),
    );
    var t, r;
  };
}
function me(e, t) {
  return "function" == typeof t
    ? function (r) {
        return r.pipe(
          me(function (r, n) {
            return ((o = e(r, n)), s ? G(o, s) : o instanceof L ? o : new L(F(o))).pipe(
              U(function (e, o) {
                return t(r, e, n, o);
              }),
            );
            var o, s;
          }),
        );
      }
    : function (t) {
        return t.lift(new be(e));
      };
}
var be = (function () {
    function e(e) {
      this.project = e;
    }
    return (
      (e.prototype.call = function (e, t) {
        return t.subscribe(new ye(e, this.project));
      }),
      e
    );
  })(),
  ye = (function (e) {
    function t(t, r) {
      var n = e.call(this, t) || this;
      return (n.project = r), (n.index = 0), n;
    }
    return (
      h(t, e),
      (t.prototype._next = function (e) {
        var t,
          r = this.index++;
        try {
          t = this.project(e, r);
        } catch (e) {
          return void this.destination.error(e);
        }
        this._innerSub(t, e, r);
      }),
      (t.prototype._innerSub = function (e, t, r) {
        var n = this.innerSubscription;
        n && n.unsubscribe();
        var o = new g(this, t, r),
          s = this.destination;
        s.add(o),
          (this.innerSubscription = k(this, e, void 0, void 0, o)),
          this.innerSubscription !== o && s.add(this.innerSubscription);
      }),
      (t.prototype._complete = function () {
        var t = this.innerSubscription;
        (t && !t.closed) || e.prototype._complete.call(this), this.unsubscribe();
      }),
      (t.prototype._unsubscribe = function () {
        this.innerSubscription = null;
      }),
      (t.prototype.notifyComplete = function (t) {
        this.destination.remove(t), (this.innerSubscription = null), this.isStopped && e.prototype._complete.call(this);
      }),
      (t.prototype.notifyNext = function (e, t, r, n, o) {
        this.destination.next(t);
      }),
      t
    );
  })(D);
function ve(e) {
  return function (t) {
    return t.lift(new _e(e));
  };
}
var _e = (function () {
    function e(e) {
      this.notifier = e;
    }
    return (
      (e.prototype.call = function (e, t) {
        var r = new Se(e),
          n = k(r, this.notifier);
        return n && !r.seenValue ? (r.add(n), t.subscribe(r)) : r;
      }),
      e
    );
  })(),
  Se = (function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return (r.seenValue = !1), r;
    }
    return (
      h(t, e),
      (t.prototype.notifyNext = function (e, t, r, n, o) {
        (this.seenValue = !0), this.complete();
      }),
      (t.prototype.notifyComplete = function () {}),
      t
    );
  })(D);
var Ee = (function () {
    function e(e, t, r) {
      (this.nextOrObserver = e), (this.error = t), (this.complete = r);
    }
    return (
      (e.prototype.call = function (e, t) {
        return t.subscribe(new xe(e, this.nextOrObserver, this.error, this.complete));
      }),
      e
    );
  })(),
  xe = (function (e) {
    function t(t, r, n, o) {
      var s = e.call(this, t) || this;
      return (
        (s._tapNext = O),
        (s._tapError = O),
        (s._tapComplete = O),
        (s._tapError = n || O),
        (s._tapComplete = o || O),
        f(r)
          ? ((s._context = s), (s._tapNext = r))
          : r &&
            ((s._context = r),
            (s._tapNext = r.next || O),
            (s._tapError = r.error || O),
            (s._tapComplete = r.complete || O)),
        s
      );
    }
    return (
      h(t, e),
      (t.prototype._next = function (e) {
        try {
          this._tapNext.call(this._context, e);
        } catch (e) {
          return void this.destination.error(e);
        }
        this.destination.next(e);
      }),
      (t.prototype._error = function (e) {
        try {
          this._tapError.call(this._context, e);
        } catch (e) {
          return void this.destination.error(e);
        }
        this.destination.error(e);
      }),
      (t.prototype._complete = function () {
        try {
          this._tapComplete.call(this._context);
        } catch (e) {
          return void this.destination.error(e);
        }
        return this.destination.complete();
      }),
      t
    );
  })(A);
function Ie() {
  for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
  return function (t) {
    var r;
    "function" == typeof e[e.length - 1] && (r = e.pop());
    var n = e;
    return t.lift(new Ae(n, r));
  };
}
var Ae = (function () {
    function e(e, t) {
      (this.observables = e), (this.project = t);
    }
    return (
      (e.prototype.call = function (e, t) {
        return t.subscribe(new Ce(e, this.observables, this.project));
      }),
      e
    );
  })(),
  Ce = (function (e) {
    function t(t, r, n) {
      var o = e.call(this, t) || this;
      (o.observables = r), (o.project = n), (o.toRespond = []);
      var s = r.length;
      o.values = new Array(s);
      for (var i = 0; i < s; i++) o.toRespond.push(i);
      for (i = 0; i < s; i++) {
        var a = r[i];
        o.add(k(o, a, a, i));
      }
      return o;
    }
    return (
      h(t, e),
      (t.prototype.notifyNext = function (e, t, r, n, o) {
        this.values[r] = t;
        var s = this.toRespond;
        if (s.length > 0) {
          var i = s.indexOf(r);
          -1 !== i && s.splice(i, 1);
        }
      }),
      (t.prototype.notifyComplete = function () {}),
      (t.prototype._next = function (e) {
        if (0 === this.toRespond.length) {
          var t = [e].concat(this.values);
          this.project ? this._tryProject(t) : this.destination.next(t);
        }
      }),
      (t.prototype._tryProject = function (e) {
        var t;
        try {
          t = this.project.apply(this, e);
        } catch (e) {
          return void this.destination.error(e);
        }
        this.destination.next(t);
      }),
      t
    );
  })(D);
const De = [0, 1, 2, 3];
function ge(e, t) {
  return (r) => r.pipe(K((r) => we(r.playerIndex, e, t)));
}
const we = (e, t, r) => {
    let n = [...De];
    if ("number" == typeof t) n = [t];
    else if ("string" == typeof t) {
      if (r && void 0 !== r.playerIndex)
        switch (t) {
          case "player":
            n = [r.playerIndex];
            break;
          case "opponents":
            n = De.filter((e) => e !== r.playerIndex);
        }
    } else n = t;
    return n.includes(e);
  },
  Te = new Map()
    .set(n.Character.CAPTAIN_FALCON, {
      id: n.Character.CAPTAIN_FALCON,
      name: "Captain Falcon",
      shortName: "Falcon",
      colors: ["Default", "Black", "Red", "White", "Green", "Blue"],
    })
    .set(n.Character.DONKEY_KONG, {
      id: n.Character.DONKEY_KONG,
      name: "Donkey Kong",
      shortName: "DK",
      colors: ["Default", "Black", "Red", "Blue", "Green"],
    })
    .set(n.Character.FOX, { id: n.Character.FOX, name: "Fox", colors: ["Default", "Red", "Blue", "Green"] })
    .set(n.Character.GAME_AND_WATCH, {
      id: n.Character.GAME_AND_WATCH,
      name: "Mr. Game & Watch",
      shortName: "GnW",
      colors: ["Default", "Red", "Blue", "Green"],
    })
    .set(n.Character.KIRBY, {
      id: n.Character.KIRBY,
      name: "Kirby",
      colors: ["Default", "Yellow", "Blue", "Red", "Green", "White"],
    })
    .set(n.Character.BOWSER, { id: n.Character.BOWSER, name: "Bowser", colors: ["Default", "Red", "Blue", "Black"] })
    .set(n.Character.LINK, { id: n.Character.LINK, name: "Link", colors: ["Default", "Red", "Blue", "Black", "White"] })
    .set(n.Character.LUIGI, { id: n.Character.LUIGI, name: "Luigi", colors: ["Default", "White", "Blue", "Red"] })
    .set(n.Character.MARIO, {
      id: n.Character.MARIO,
      name: "Mario",
      colors: ["Default", "Yellow", "Black", "Blue", "Green"],
    })
    .set(n.Character.MARTH, {
      id: n.Character.MARTH,
      name: "Marth",
      colors: ["Default", "Red", "Green", "Black", "White"],
    })
    .set(n.Character.MEWTWO, { id: n.Character.MEWTWO, name: "Mewtwo", colors: ["Default", "Red", "Blue", "Green"] })
    .set(n.Character.NESS, { id: n.Character.NESS, name: "Ness", colors: ["Default", "Yellow", "Blue", "Green"] })
    .set(n.Character.PEACH, {
      id: n.Character.PEACH,
      name: "Peach",
      colors: ["Default", "Daisy", "White", "Blue", "Green"],
    })
    .set(n.Character.PIKACHU, {
      id: n.Character.PIKACHU,
      name: "Pikachu",
      colors: ["Default", "Red", "Party Hat", "Cowboy Hat"],
    })
    .set(n.Character.ICE_CLIMBERS, {
      id: n.Character.ICE_CLIMBERS,
      name: "Ice Climbers",
      shortName: "ICs",
      colors: ["Default", "Green", "Orange", "Red"],
    })
    .set(n.Character.JIGGLYPUFF, {
      id: n.Character.JIGGLYPUFF,
      name: "Jigglypuff",
      shortName: "Puff",
      colors: ["Default", "Red", "Blue", "Headband", "Crown"],
    })
    .set(n.Character.SAMUS, {
      id: n.Character.SAMUS,
      name: "Samus",
      colors: ["Default", "Pink", "Black", "Green", "Purple"],
    })
    .set(n.Character.YOSHI, {
      id: n.Character.YOSHI,
      name: "Yoshi",
      colors: ["Default", "Red", "Blue", "Yellow", "Pink", "Cyan"],
    })
    .set(n.Character.ZELDA, {
      id: n.Character.ZELDA,
      name: "Zelda",
      colors: ["Default", "Red", "Blue", "Green", "White"],
    })
    .set(n.Character.SHEIK, {
      id: n.Character.SHEIK,
      name: "Sheik",
      colors: ["Default", "Red", "Blue", "Green", "White"],
    })
    .set(n.Character.FALCO, { id: n.Character.FALCO, name: "Falco", colors: ["Default", "Red", "Blue", "Green"] })
    .set(n.Character.YOUNG_LINK, {
      id: n.Character.YOUNG_LINK,
      name: "Young Link",
      shortName: "YL",
      colors: ["Default", "Red", "Blue", "White", "Black"],
    })
    .set(n.Character.DR_MARIO, {
      id: n.Character.DR_MARIO,
      name: "Dr. Mario",
      shortName: "Doc",
      colors: ["Default", "Red", "Blue", "Green", "Black"],
    })
    .set(n.Character.ROY, { id: n.Character.ROY, name: "Roy", colors: ["Default", "Red", "Blue", "Green", "Yellow"] })
    .set(n.Character.PICHU, { id: n.Character.PICHU, name: "Pichu", colors: ["Default", "Red", "Blue", "Green"] })
    .set(n.Character.GANONDORF, {
      id: n.Character.GANONDORF,
      name: "Ganondorf",
      shortName: "Ganon",
      colors: ["Default", "Red", "Blue", "Green", "Purple"],
    });
function Re(e) {
  const t = Te.get(e);
  if (!t) throw new Error(`Invalid character id: ${e}`);
  return t;
}
function Me(e) {
  return Re(e).name;
}
const Pe = { id: -1, name: "Unknown Move", shortName: "unknown" };
var Fe;
((Fe = exports.MoveID || (exports.MoveID = {}))[(Fe.MISC = 1)] = "MISC"),
  (Fe[(Fe.JAB_1 = 2)] = "JAB_1"),
  (Fe[(Fe.JAB_2 = 3)] = "JAB_2"),
  (Fe[(Fe.JAB_3 = 4)] = "JAB_3"),
  (Fe[(Fe.RAPID_JABS = 5)] = "RAPID_JABS"),
  (Fe[(Fe.DASH_ATTACK = 6)] = "DASH_ATTACK"),
  (Fe[(Fe.F_TILT = 7)] = "F_TILT"),
  (Fe[(Fe.U_TILT = 8)] = "U_TILT"),
  (Fe[(Fe.D_TILT = 9)] = "D_TILT"),
  (Fe[(Fe.F_SMASH = 10)] = "F_SMASH"),
  (Fe[(Fe.U_SMASH = 11)] = "U_SMASH"),
  (Fe[(Fe.D_SMASH = 12)] = "D_SMASH"),
  (Fe[(Fe.NEUTRAL_AIR = 13)] = "NEUTRAL_AIR"),
  (Fe[(Fe.F_AIR = 14)] = "F_AIR"),
  (Fe[(Fe.B_AIR = 15)] = "B_AIR"),
  (Fe[(Fe.U_AIR = 16)] = "U_AIR"),
  (Fe[(Fe.D_AIR = 17)] = "D_AIR"),
  (Fe[(Fe.NEUTRAL_SPECIAL = 18)] = "NEUTRAL_SPECIAL"),
  (Fe[(Fe.F_SPECIAL = 19)] = "F_SPECIAL"),
  (Fe[(Fe.U_SPECIAL = 20)] = "U_SPECIAL"),
  (Fe[(Fe.D_SPECIAL = 21)] = "D_SPECIAL"),
  (Fe[(Fe.GETUP = 50)] = "GETUP"),
  (Fe[(Fe.GETUP_SLOW = 51)] = "GETUP_SLOW"),
  (Fe[(Fe.GRAB_PUMMEL = 52)] = "GRAB_PUMMEL"),
  (Fe[(Fe.F_THROW = 53)] = "F_THROW"),
  (Fe[(Fe.B_THROW = 54)] = "B_THROW"),
  (Fe[(Fe.U_THROW = 55)] = "U_THROW"),
  (Fe[(Fe.D_THROW = 56)] = "D_THROW"),
  (Fe[(Fe.EDGE_SLOW = 61)] = "EDGE_SLOW"),
  (Fe[(Fe.EDGE = 62)] = "EDGE");
const Oe = new Map()
  .set(exports.MoveID.MISC, { id: exports.MoveID.MISC, name: "Miscellaneous", shortName: "misc" })
  .set(exports.MoveID.JAB_1, { id: exports.MoveID.JAB_1, name: "Jab", shortName: "jab" })
  .set(exports.MoveID.JAB_2, { id: exports.MoveID.JAB_2, name: "Jab", shortName: "jab" })
  .set(exports.MoveID.JAB_3, { id: exports.MoveID.JAB_3, name: "Jab", shortName: "jab" })
  .set(exports.MoveID.RAPID_JABS, { id: exports.MoveID.RAPID_JABS, name: "Rapid Jabs", shortName: "rapid-jabs" })
  .set(exports.MoveID.DASH_ATTACK, { id: exports.MoveID.DASH_ATTACK, name: "Dash Attack", shortName: "dash" })
  .set(exports.MoveID.F_TILT, { id: exports.MoveID.F_TILT, name: "Forward Tilt", shortName: "ftilt" })
  .set(exports.MoveID.U_TILT, { id: exports.MoveID.U_TILT, name: "Up Tilt", shortName: "utilt" })
  .set(exports.MoveID.D_TILT, { id: exports.MoveID.D_TILT, name: "Down Tilt", shortName: "dtilt" })
  .set(exports.MoveID.F_SMASH, { id: exports.MoveID.F_SMASH, name: "Forward Smash", shortName: "fsmash" })
  .set(exports.MoveID.U_SMASH, { id: exports.MoveID.U_SMASH, name: "Up Smash", shortName: "usmash" })
  .set(exports.MoveID.D_SMASH, { id: exports.MoveID.D_SMASH, name: "Down Smash", shortName: "dsmash" })
  .set(exports.MoveID.NEUTRAL_AIR, { id: exports.MoveID.NEUTRAL_AIR, name: "Neutral Air", shortName: "nair" })
  .set(exports.MoveID.F_AIR, { id: exports.MoveID.F_AIR, name: "Forward Air", shortName: "fair" })
  .set(exports.MoveID.B_AIR, { id: exports.MoveID.B_AIR, name: "Back Air", shortName: "bair" })
  .set(exports.MoveID.U_AIR, { id: exports.MoveID.U_AIR, name: "Up Air", shortName: "uair" })
  .set(exports.MoveID.D_AIR, { id: exports.MoveID.D_AIR, name: "Down Air", shortName: "dair" })
  .set(exports.MoveID.NEUTRAL_SPECIAL, {
    id: exports.MoveID.NEUTRAL_SPECIAL,
    name: "Neutral B",
    shortName: "neutral-b",
  })
  .set(exports.MoveID.F_SPECIAL, { id: exports.MoveID.F_SPECIAL, name: "Side B", shortName: "side-b" })
  .set(exports.MoveID.U_SPECIAL, { id: exports.MoveID.U_SPECIAL, name: "Up B", shortName: "up-b" })
  .set(exports.MoveID.D_SPECIAL, { id: exports.MoveID.D_SPECIAL, name: "Down B", shortName: "down-b" })
  .set(exports.MoveID.GETUP, { id: exports.MoveID.GETUP, name: "Getup Attack", shortName: "getup" })
  .set(exports.MoveID.GETUP_SLOW, {
    id: exports.MoveID.GETUP_SLOW,
    name: "Getup Attack (Slow)",
    shortName: "getup-slow",
  })
  .set(exports.MoveID.GRAB_PUMMEL, { id: exports.MoveID.GRAB_PUMMEL, name: "Grab Pummel", shortName: "pummel" })
  .set(exports.MoveID.F_THROW, { id: 53, name: "Forward Throw", shortName: "fthrow" })
  .set(exports.MoveID.B_THROW, { id: exports.MoveID.B_THROW, name: "Back Throw", shortName: "bthrow" })
  .set(exports.MoveID.U_THROW, { id: exports.MoveID.U_THROW, name: "Up Throw", shortName: "uthrow" })
  .set(exports.MoveID.D_THROW, { id: exports.MoveID.D_THROW, name: "Down Throw", shortName: "dthrow" })
  .set(exports.MoveID.EDGE_SLOW, { id: exports.MoveID.EDGE_SLOW, name: "Edge Attack (Slow)", shortName: "edge-slow" })
  .set(exports.MoveID.EDGE, { id: exports.MoveID.EDGE, name: "Edge Attack", shortName: "edge" });
function Ne(e) {
  const t = Oe.get(e);
  return t || Pe;
}
const Le = new Map()
  .set(n.Stage.FOUNTAIN_OF_DREAMS, "FoD")
  .set(n.Stage.POKEMON_STADIUM, "PS")
  .set(n.Stage.YOSHIS_STORY, "YS")
  .set(n.Stage.DREAMLAND, "DL")
  .set(n.Stage.BATTLEFIELD, "BF")
  .set(n.Stage.FINAL_DESTINATION, "FD");
function Be(e) {
  const t = n.stages.getStageInfo(e);
  if (!t) throw new Error(`Invalid stage with id ${e}`);
  const r = Le.get(e);
  return { ...t, shortName: r };
}
function ke(e) {
  return Be(e).name;
}
function Ge(e, t) {
  return [0, 1, 2, 3].map((n) => {
    var o, s;
    const i = [],
      a = e.players.find((e) => e.playerIndex === n),
      c = a ? a.nametag : null,
      u =
        null !== (o = r.get(t, ["players", n, "names", "netplay"], null)) && void 0 !== o
          ? o
          : null == a
          ? void 0
          : a.displayName,
      p =
        null !== (s = r.get(t, ["players", n, "names", "code"], null)) && void 0 !== s
          ? s
          : null == a
          ? void 0
          : a.connectCode;
    return u && i.push(u), p && i.push(p), c && i.push(c), i;
  });
}
function Ue(e, t, r) {
  if (0 === e.length || 0 === t.length) return !1;
  return (
    void 0 !==
    t.find((t) => {
      if (!r) return e.includes(t);
      const n = t.toLowerCase();
      return (
        void 0 !==
        e.find((e) => {
          const t = e.toLowerCase(),
            r = e.split(" ").join("_").toLowerCase();
          return t === n || r === n;
        })
      );
    })
  );
}
const je = (e, t, r) => {
    const n = e.moves.find((e) => r.portFilter.includes(e.playerIndex + 1));
    return Boolean(n);
  },
  $e = (e, t, r, n) => {
    if (0 === r.nameTags.length) return !0;
    const o = Ge(t, n),
      s = new Set(e.moves.map((e) => e.playerIndex));
    return (
      void 0 !==
      Array.from(s).find((e) => {
        const t = o[e];
        return 0 !== t.length && Ue(r.nameTags, t, r.fuzzyNameTagMatching);
      })
    );
  },
  He = (e, t, r) => We(e, t, r.characterFilter),
  We = (e, t, r) => {
    if (0 === r.length) return !0;
    const n = e.moves.find((e) => {
      const n = t.players.find((t) => t.playerIndex === e.playerIndex);
      return !(!n || null === n.characterId) && r.includes(n.characterId);
    });
    return Boolean(n);
  },
  Ye = (e, t, r) => {
    if (!r.excludeChainGrabs) return !0;
    if (!We(e, t, r.chainGrabbers)) return !0;
    return !(
      e.moves.filter(({ moveId: e }) => e === exports.MoveID.U_THROW || e === exports.MoveID.GRAB_PUMMEL).length /
        e.moves.length >=
      r.chainGrabThreshold
    );
  },
  Ke = (e, t, r) => {
    if (!r.excludeWobbles) return !0;
    if (!We(e, t, [n.Character.ICE_CLIMBERS])) return !0;
    const o = [];
    let s = 0;
    e.moves.forEach(({ moveId: e }) => {
      e === exports.MoveID.GRAB_PUMMEL ? s++ : (o.push(s), (s = 0));
    }),
      o.push(s);
    return !o.some((e) => e > r.wobbleThreshold);
  },
  Je = (e, t, r) => e.moves.length >= r.minComboLength,
  Ve = (e, t, r) => {
    if (2 !== t.players.length) return !0;
    const n = e.moves.find((t) => t.playerIndex !== e.playerIndex);
    if (!n) return !1;
    const o = t.players.find((e) => e.playerIndex === n.playerIndex);
    if (!o || null === o.characterId) return !1;
    const s = r.perCharacterMinComboPercent[o.characterId] || r.minComboPercent;
    return (null === e.endPercent || void 0 === e.endPercent ? e.startPercent : e.endPercent - e.startPercent) > s;
  },
  qe = (e, t, n) => {
    const o = r.sumBy(e.moves, ({ damage: e }) => e);
    return !e.moves.some(({ damage: e }) => e / o >= n.largeHitThreshold);
  },
  Xe = (e, t, r) => {
    if (!r.excludeCPUs) return !0;
    return !t.players.some((e) => 0 != e.type);
  },
  Ze = (e, t) => 2 === t.players.length,
  ze = (e, t, r) => !r.comboMustKill || e.didKill,
  Qe = [je, $e, He, Ye, Ke, Je, Ve, qe, Xe, Ze, ze],
  et = {
    chainGrabbers: [n.Character.MARTH, n.Character.PEACH, n.Character.PIKACHU, n.Character.DR_MARIO],
    characterFilter: [],
    portFilter: [1, 2, 3, 4],
    nameTags: [],
    minComboLength: 1,
    minComboPercent: 60,
    comboMustKill: !0,
    excludeCPUs: !0,
    excludeChainGrabs: !0,
    excludeWobbles: !0,
    largeHitThreshold: 0.8,
    wobbleThreshold: 8,
    chainGrabThreshold: 0.8,
    perCharacterMinComboPercent: { [n.Character.JIGGLYPUFF]: 85 },
    fuzzyNameTagMatching: !0,
  };
const tt = (e, t, r, n, o) => {
  const s = o && o.length > 0 ? o : [...Qe];
  for (const o of s) if (!o(t, r, e, n)) return !1;
  return !0;
};
var rt, nt, ot;
function st(e) {
  return null != e;
}
((rt = exports.GameEndMethod || (exports.GameEndMethod = {}))[(rt.UNRESOLVED = 0)] = "UNRESOLVED"),
  (rt[(rt.TIME = 1)] = "TIME"),
  (rt[(rt.GAME = 2)] = "GAME"),
  (rt[(rt.RESOLVED = 3)] = "RESOLVED"),
  (rt[(rt.NO_CONTEST = 7)] = "NO_CONTEST"),
  ((nt = exports.Input || (exports.Input = {})).D_LEFT = "D_LEFT"),
  (nt.D_RIGHT = "D_RIGHT"),
  (nt.D_DOWN = "D_DOWN"),
  (nt.D_UP = "D_UP"),
  (nt.Z = "Z"),
  (nt.R = "R"),
  (nt.L = "L"),
  (nt.A = "A"),
  (nt.B = "B"),
  (nt.X = "X"),
  (nt.Y = "Y"),
  (nt.START = "START"),
  (function (e) {
    (e[(e.D_LEFT = 1)] = "D_LEFT"),
      (e[(e.D_RIGHT = 2)] = "D_RIGHT"),
      (e[(e.D_DOWN = 4)] = "D_DOWN"),
      (e[(e.D_UP = 8)] = "D_UP"),
      (e[(e.Z = 16)] = "Z"),
      (e[(e.R = 32)] = "R"),
      (e[(e.L = 64)] = "L"),
      (e[(e.A = 256)] = "A"),
      (e[(e.B = 512)] = "B"),
      (e[(e.X = 1024)] = "X"),
      (e[(e.Y = 2048)] = "Y"),
      (e[(e.START = 4096)] = "START");
  })(ot || (ot = {}));
const it = new Map()
    .set(exports.Input.D_LEFT, ot.D_LEFT)
    .set(exports.Input.D_RIGHT, ot.D_RIGHT)
    .set(exports.Input.D_DOWN, ot.D_DOWN)
    .set(exports.Input.D_UP, ot.D_UP)
    .set(exports.Input.Z, ot.Z)
    .set(exports.Input.R, ot.R)
    .set(exports.Input.L, ot.L)
    .set(exports.Input.A, ot.A)
    .set(exports.Input.B, ot.B)
    .set(exports.Input.X, ot.X)
    .set(exports.Input.Y, ot.Y)
    .set(exports.Input.START, ot.START),
  at = (...e) => ((...e) => e.reduce((e, t) => e | t))(...e.map((e) => ct(e))),
  ct = (e) => {
    const t = it.get(e);
    if (!st(t)) throw new Error(`Unknown input: ${e}`);
    return t;
  },
  ut = (e) => {
    const t = new Array();
    return (
      it.forEach((r, n) => {
        ((e, t) => (e & t) === t)(e, r) && t.push(n);
      }),
      t
    );
  };
var pt, lt;
!(function (e) {
  (e.FILE_PATH = "[FILE_PATH]"),
    (e.LRAS = "[LRAS]"),
    (e.PLAYBACK_START_FRAME = "[PLAYBACK_START_FRAME]"),
    (e.GAME_END_FRAME = "[GAME_END_FRAME]"),
    (e.PLAYBACK_END_FRAME = "[PLAYBACK_END_FRAME]"),
    (e.CURRENT_FRAME = "[CURRENT_FRAME]"),
    (e.NO_GAME = "[NO_GAME]");
})(pt || (pt = {})),
  ((lt = exports.DolphinPlaybackStatus || (exports.DolphinPlaybackStatus = {})).FILE_LOADED = "FILE_LOADED"),
  (lt.PLAYBACK_START = "PLAYBACK_START"),
  (lt.PLAYBACK_END = "PLAYBACK_END"),
  (lt.QUEUE_EMPTY = "QUEUE_EMPTY");
const ht = { startBuffer: 1, endBuffer: 1 },
  ft = n.Frames.FIRST - 1,
  dt = {
    gameEnded: !1,
    forceQuit: !1,
    currentFrame: ft,
    lastGameFrame: ft,
    startPlaybackFrame: ft,
    endPlaybackFrame: ft,
  };
class mt extends i.Writable {
  constructor(e, r) {
    super(r),
      (this.streamEndedSource = new t.Subject()),
      (this.playbackStatusSource = new t.Subject()),
      (this.playbackStatus$ = this.playbackStatusSource.asObservable().pipe(ve(this.streamEndedSource))),
      (this.buffers = Object.assign({}, ht, e)),
      (this.state = Object.assign({}, dt)),
      this.on("finish", () => {
        this.streamEndedSource.next();
      });
  }
  setBuffer(e) {
    this.buffers = Object.assign(this.buffers, e);
  }
  _write(e, t, r) {
    if ("buffer" !== t) throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${t}'.`);
    e
      .toString()
      .split(s.EOL)
      .filter((e) => Boolean(e))
      .forEach((e) => {
        const [t, r] = e.split(" ");
        this._processCommand(t, r);
      }),
      r();
  }
  _processCommand(e, t) {
    const r = parseInt(t);
    switch (e) {
      case pt.FILE_PATH:
        this._resetState(),
          this.playbackStatusSource.next({ status: exports.DolphinPlaybackStatus.FILE_LOADED, data: { path: t } });
        break;
      case pt.LRAS:
        this.state.forceQuit = !0;
        break;
      case pt.CURRENT_FRAME:
        this._handleCurrentFrame(r);
        break;
      case pt.PLAYBACK_START_FRAME:
        this._handlePlaybackStartFrame(r);
        break;
      case pt.PLAYBACK_END_FRAME:
        this._handlePlaybackEndFrame(r);
        break;
      case pt.GAME_END_FRAME:
        this.state.lastGameFrame = r;
        break;
      case pt.NO_GAME:
        this._handleNoGame();
        break;
      default:
        console.error(`Unknown command ${e} with value ${t}`);
    }
  }
  _handleCurrentFrame(e) {
    (this.state.currentFrame = e),
      this.state.currentFrame === this.state.startPlaybackFrame
        ? this.playbackStatusSource.next({ status: exports.DolphinPlaybackStatus.PLAYBACK_START })
        : this.state.currentFrame === this.state.endPlaybackFrame &&
          (this.playbackStatusSource.next({
            status: exports.DolphinPlaybackStatus.PLAYBACK_END,
            data: { gameEnded: this.state.gameEnded, forceQuit: this.state.forceQuit },
          }),
          this._resetState());
  }
  _handlePlaybackStartFrame(e) {
    this.state.startPlaybackFrame = Math.max(e, e + this.buffers.startBuffer);
  }
  _handlePlaybackEndFrame(e) {
    (this.state.endPlaybackFrame = e), (this.state.gameEnded = this.state.endPlaybackFrame >= this.state.lastGameFrame);
    const t = Math.max(this.state.startPlaybackFrame, this.state.endPlaybackFrame - this.buffers.endBuffer);
    this.state.endPlaybackFrame = Math.min(t, this.state.lastGameFrame);
  }
  _handleNoGame() {
    this.playbackStatusSource.next({ status: exports.DolphinPlaybackStatus.QUEUE_EMPTY });
  }
  _resetState() {
    this.state = Object.assign({}, dt);
  }
}
const bt = {
  dolphinPath: "",
  meleeIsoPath: "",
  batch: !1,
  disableSeekBar: !1,
  readEvents: !0,
  startBuffer: 1,
  endBuffer: 1,
};
const yt = {
    shuffle: !1,
    mode: "queue",
    replay: "",
    isRealTimeMode: !1,
    outputOverlayFiles: !0,
    startBuffer: 240,
    endBuffer: 180,
  },
  vt = (e, t) => {
    const n = Object.assign({}, yt, t),
      o = (n.shuffle ? r.shuffle(e) : e).map((e) => _t(e, n.startBuffer, n.endBuffer));
    return {
      mode: n.mode,
      replay: n.replay,
      isRealTimeMode: n.isRealTimeMode,
      outputOverlayFiles: n.outputOverlayFiles,
      queue: o,
    };
  },
  _t = (e, t, r) => {
    const { combo: o, ...s } = e;
    return (
      o &&
        ((s.startFrame = Math.max(n.Frames.FIRST, o.startFrame - t)), st(o.endFrame) && (s.endFrame = o.endFrame + r)),
      s
    );
  },
  St = (e) => t.merge(e(0), e(1), e(2), e(3)),
  Et = (e) =>
    Object.keys(e.players)
      .map((t) => {
        var r;
        return null === (r = e.players[t]) || void 0 === r ? void 0 : r.post;
      })
      .filter(st)
      .reduce((e, t) =>
        st(e.stocksRemaining) && st(t.stocksRemaining) && st(e.percent) && st(t.percent)
          ? e.stocksRemaining > t.stocksRemaining
            ? e
            : e.stocksRemaining < t.stocksRemaining
            ? t
            : e.percent < t.percent
            ? e
            : e.percent > t.percent
            ? t
            : e
          : e,
      ).playerIndex;
var xt, It, At;
((xt = exports.ComboEvent || (exports.ComboEvent = {})).START = "combo-start"),
  (xt.EXTEND = "combo-extend"),
  (xt.END = "combo-occurred"),
  (xt.CONVERSION = "conversion-occurred"),
  ((It = exports.GameEvent || (exports.GameEvent = {})).GAME_START = "game-start"),
  (It.GAME_END = "game-end"),
  ((exports.InputEvent || (exports.InputEvent = {})).BUTTON_COMBO = "button-combo"),
  ((At = exports.StockEvent || (exports.StockEvent = {})).PLAYER_SPAWN = "player-spawn"),
  (At.PLAYER_DIED = "player-died");
const Ct = (e, t, r) => {
    const n = t.filter;
    if (n && n.playerIndex) {
      const t = n.playerIndex;
      e = e.pipe(K((e) => we(e.combo.playerIndex, t, r)));
    }
    return e;
  },
  Dt = (e, t, r) => {
    const n = t.filter;
    let o = Object.assign({}, et);
    if (n && n.comboCriteria) {
      const t = n.comboCriteria;
      if ("string" == typeof t) {
        if ("$" === t.charAt(0) && st(r) && r[t]) o = Object.assign(o, r[t]);
        else if ("none" === t) return e;
      } else o = Object.assign(o, t);
    }
    return e.pipe(K((e) => tt(o, e.combo, e.settings)));
  },
  gt = (e, r) => {
    const n = e.events
      .filter((e) => e.type === exports.GameEvent.GAME_START)
      .map((e) => {
        let t = r;
        const n = e.filter;
        return (
          n &&
            (void 0 !== n.numPlayers && (t = t.pipe(K((e) => e.players.length === n.numPlayers))),
            void 0 !== n.isTeams && (t = t.pipe(K((e) => e.isTeams === n.isTeams)))),
          t.pipe(U((t) => ({ id: e.id, type: e.type, payload: t })))
        );
      });
    return t.merge(...n);
  },
  wt = (e, r) => {
    const n = e.events
      .filter((e) => e.type === exports.GameEvent.GAME_END)
      .map((t) => {
        let n = r;
        const o = t.filter;
        if (o) {
          void 0 !== o.endMethod && (n = n.pipe(K((e) => e.gameEndMethod === o.endMethod)));
          const t = o.winnerPlayerIndex;
          st(t) && (n = n.pipe(K((r) => we(r.winnerPlayerIndex, t, e.variables))));
        }
        return n.pipe(U((e) => ({ id: t.id, type: t.type, payload: e })));
      });
    return t.merge(...n);
  };
function Tt(e) {
  return (t) => t.pipe(K((t) => Object.keys(t.players).includes(e.toString())));
}
function Rt() {
  return (e) =>
    e.pipe(
      function (e) {
        return e.lift(new ue());
      },
      K(([{ frame: e }, { frame: t }]) => st(e) && st(t) && t > e),
    );
}
function Mt() {
  return (e) => e.pipe(K((e) => e.frame === n.Frames.FIRST));
}
function Pt(e, t, r = 1) {
  const o = at(...t);
  return (t) =>
    t.pipe(
      Tt(e),
      U((t) => {
        var r;
        const n = null === (r = t.players[e]) || void 0 === r ? void 0 : r.pre.physicalButtons;
        if (!st(n)) return null;
        const s = (n & o) === o;
        return { frame: t.frame, buttonPressed: s, buttonCombo: ut(n) };
      }),
      K(st),
      (function (e, t) {
        var r = !1;
        return (
          arguments.length >= 2 && (r = !0),
          function (n) {
            return n.lift(new ee(e, t, r));
          }
        );
      })((e, t) => ({ count: t.buttonPressed ? e.count + 1 : 0, frame: t.frame, buttonCombo: t.buttonCombo }), {
        count: 0,
        frame: n.Frames.FIRST,
        buttonCombo: [],
      }),
      K((e) => e.count === r),
      U((t) => ({ playerIndex: e, combo: t.buttonCombo, frame: t.frame, duration: r })),
    );
}
function Ft(e) {
  return (r) => {
    const o = r.pipe(Tt(e), Mt()),
      s = r.pipe(
        Tt(e),
        Rt(),
        K(([t, r]) => {
          var o, s, i, a;
          const c =
              null !== (s = null === (o = t.players[e]) || void 0 === o ? void 0 : o.post.actionStateId) && void 0 !== s
                ? s
                : null,
            u =
              null !== (a = null === (i = r.players[e]) || void 0 === i ? void 0 : i.post.actionStateId) && void 0 !== a
                ? a
                : null;
          return null !== c && null !== u && n.isDead(c) && !n.isDead(u);
        }),
        U(([e, t]) => t),
      );
    return t.merge(o, s);
  };
}
function Ot(e, t) {
  return (r) =>
    r.pipe(
      Ie(e),
      U(([e, r]) => {
        const n = r.players.find((e) => e.playerIndex === t);
        if (!n || !st(e.frame) || !st(e.stocksRemaining)) return null;
        return {
          playerIndex: n.playerIndex,
          startFrame: e.frame,
          endFrame: null,
          startPercent: 0,
          endPercent: null,
          currentPercent: 0,
          count: e.stocksRemaining,
          deathAnimation: null,
        };
      }),
      K(st),
    );
}
function Nt(e) {
  return (t) =>
    t.pipe(
      Ie(e),
      U(([[e, t], r]) => {
        var n, o;
        return {
          ...r,
          endFrame: t.frame,
          endPercent: null !== (n = e.percent) && void 0 !== n ? n : 0,
          currentPercent: null !== (o = e.percent) && void 0 !== o ? o : 0,
          deathAnimation: t.actionStateId,
        };
      }),
    );
}
const Lt = (e, r) => {
  const n = e.events.filter(Bt).map((t) => {
    let n = 1;
    st(t.filter.duration) && t.filter.duration > 1 && (n = Math.floor(t.filter.duration));
    let o = r(t.filter.combo, n);
    return (
      t.filter && void 0 !== t.filter.playerIndex && (o = o.pipe(ge(t.filter.playerIndex, e.variables))),
      o.pipe(U((e) => ({ id: t.id, type: t.type, payload: e })))
    );
  });
  return t.merge(...n);
};
function Bt(e) {
  return e.type === exports.InputEvent.BUTTON_COMBO && st(e.filter) && e.filter.combo && e.filter.combo.length > 0;
}
const kt = (e, r) => {
    const n = e.events
      .filter((e) => e.type === exports.StockEvent.PLAYER_SPAWN)
      .map((t) => {
        let n = r;
        const o = t.filter;
        if (o && st(o.playerIndex))
          for (const t of Object.keys(o)) if ("playerIndex" === t) n = n.pipe(ge(o.playerIndex, e.variables));
        return n.pipe(U((e) => ({ id: t.id, type: t.type, payload: e })));
      });
    return t.merge(...n);
  },
  Gt = (e, r) => {
    const n = e.events
      .filter((e) => e.type === exports.StockEvent.PLAYER_DIED)
      .map((t) => {
        const n = t.filter;
        let o = r;
        return (
          n && void 0 !== n.playerIndex && (o = o.pipe(ge(n.playerIndex, e.variables))),
          o.pipe(U((e) => ({ id: t.id, type: t.type, payload: e })))
        );
      });
    return t.merge(...n);
  };
class Ut {
  constructor(e) {
    (this.conversionComputer = new n.ConversionComputer()),
      (this.end$ = t.fromEvent(this.conversionComputer, "CONVERSION").pipe(de())),
      (this.stream$ = e),
      this.stream$.pipe(me((e) => e.gameStart$)).subscribe((e) => {
        this.conversionComputer.setup(e);
      }),
      this.stream$
        .pipe(
          me((e) => e.allFrames$),
          K(({ latestFrame: e }) => 2 === Object.keys(e.players).length),
        )
        .subscribe(({ latestFrame: e, allFrames: t }) => {
          this.conversionComputer.processFrame(e, t);
        });
  }
}
class jt {
  constructor(e) {
    (this.comboComputer = new n.ComboComputer()),
      (this.start$ = t.fromEvent(this.comboComputer, "COMBO_START").pipe(de())),
      (this.extend$ = t.fromEvent(this.comboComputer, "COMBO_EXTEND").pipe(de())),
      (this.end$ = t.fromEvent(this.comboComputer, "COMBO_END").pipe(de())),
      (this.stream$ = e);
    const r = new Ut(e);
    (this.conversion$ = r.end$),
      this.stream$.pipe(me((e) => e.gameStart$)).subscribe((e) => {
        this.comboComputer.setup(e);
      }),
      this.stream$
        .pipe(
          me((e) => e.allFrames$),
          K(({ latestFrame: e }) => 2 === Object.keys(e.players).length),
        )
        .subscribe(({ allFrames: e, latestFrame: t }) => {
          this.comboComputer.processFrame(t, e);
        });
  }
}
class $t {
  constructor(e) {
    (this.stream$ = e),
      (this.start$ = this.stream$.pipe(me((e) => e.gameStart$))),
      (this.end$ = this.stream$.pipe(
        me((e) =>
          e.gameEnd$.pipe(
            Ie(e.playerFrame$),
            U(([e, t]) => ({ ...e, winnerPlayerIndex: Et(t), lastFrame: t })),
          ),
        ),
      )),
      (this.rawFrames$ = St((e) =>
        this.stream$.pipe(
          me((e) => e.playerFrame$),
          Tt(e),
        ),
      ));
  }
}
class Ht {
  constructor(e) {
    this.stream$ = e;
  }
  buttonCombo(e, t) {
    return St((r) => this.playerIndexButtonCombo(r, e, t));
  }
  playerIndexButtonCombo(e, t, r = 1) {
    return this.stream$.pipe(
      me((e) => e.playerFrame$),
      Pt(e, t, r),
    );
  }
}
class Wt {
  constructor(e) {
    (this.stream$ = e),
      (this.playerSpawn$ = St((e) => this.playerIndexSpawn(e))),
      (this.playerDied$ = St((e) => this.playerIndexDied(e))),
      (this.percentChange$ = St((e) => this.playerIndexPercentChange(e))),
      (this.countChange$ = St((e) => this.playerIndexStockCountChange(e)));
  }
  playerIndexSpawn(e) {
    return this.stream$.pipe(
      me((t) =>
        t.playerFrame$.pipe(
          Ft(e),
          U((t) => {
            var r;
            return null === (r = t.players[e]) || void 0 === r ? void 0 : r.post;
          }),
          K(st),
          Ot(t.gameStart$, e),
        ),
      ),
    );
  }
  playerIndexDied(e) {
    return this.stream$.pipe(
      me((e) => e.playerFrame$),
      Tt(e),
      U((t) => {
        var r;
        return null === (r = t.players[e]) || void 0 === r ? void 0 : r.post;
      }),
      K(st),
      Rt(),
      K(([e, t]) => n.didLoseStock(t, e)),
      Nt(this.playerIndexSpawn(e)),
    );
  }
  playerIndexPercentChange(e) {
    return this.stream$.pipe(
      me((e) => e.playerFrame$),
      Tt(e),
      U((t) => {
        var r;
        return null === (r = t.players[e]) || void 0 === r ? void 0 : r.post.percent;
      }),
      K(st),
      H(),
      U((t) => ({ playerIndex: e, percent: t })),
    );
  }
  playerIndexStockCountChange(e) {
    return this.stream$.pipe(
      me((e) => e.playerFrame$),
      Tt(e),
      U((t) => {
        var r;
        return null === (r = t.players[e]) || void 0 === r ? void 0 : r.post.stocksRemaining;
      }),
      K(st),
      H(),
      U((t) => ({ playerIndex: e, stocksRemaining: t })),
    );
  }
}
class Yt extends n.SlpFileWriter {
  constructor(e, r) {
    var o, s, i;
    super({ ...e, outputFiles: e && !0 === e.outputFiles }, r),
      (this.parser = new n.SlpParser({ strict: !0 })),
      (this.messageSizeSource = new t.Subject()),
      (this.allFrames = {}),
      (this.messageSize$ = this.messageSizeSource.asObservable()),
      (this.gameStart$ = t.fromEvent(this.parser, n.SlpParserEvent.SETTINGS).pipe(de())),
      (this.playerFrame$ = t.fromEvent(this.parser, n.SlpParserEvent.FINALIZED_FRAME).pipe(de())),
      (this.gameEnd$ = t.fromEvent(this.parser, n.SlpParserEvent.END).pipe(de())),
      (this.allFrames$ = this.playerFrame$.pipe(
        ((o = (e) => {
          const t = e.frame;
          this.allFrames[t] = e;
        }),
        function (e) {
          return e.lift(new Ee(o, s, i));
        }),
        U((e) => ({ allFrames: this.allFrames, latestFrame: e })),
      )),
      this.on(n.SlpStreamEvent.COMMAND, (e) => {
        const { command: t, payload: r } = e;
        if (t === n.Command.MESSAGE_SIZES) this.parser.reset(), this.messageSizeSource.next(r);
        try {
          this.parser.handleCommand(t, r);
        } catch (e) {
          console.error(`Error processing command ${t}: ${e}`);
        }
      });
  }
  restart() {
    this.parser.reset(), super.restart(), (this.allFrames = {});
  }
}
const Kt = (e, t) => {
  const r = new Promise((t, r) => {
    const n = setTimeout(() => {
      clearTimeout(n), r(new Error(`Timed out after ${e}ms.`));
    }, e);
  });
  return Promise.race([t, r]);
};
Object.defineProperty(exports, "Character", {
  enumerable: !0,
  get: function () {
    return n.Character;
  },
}),
  Object.defineProperty(exports, "ConnectionEvent", {
    enumerable: !0,
    get: function () {
      return n.ConnectionEvent;
    },
  }),
  Object.defineProperty(exports, "ConnectionStatus", {
    enumerable: !0,
    get: function () {
      return n.ConnectionStatus;
    },
  }),
  Object.defineProperty(exports, "ConsoleConnection", {
    enumerable: !0,
    get: function () {
      return n.ConsoleConnection;
    },
  }),
  Object.defineProperty(exports, "Frames", {
    enumerable: !0,
    get: function () {
      return n.Frames;
    },
  }),
  Object.defineProperty(exports, "SlpStreamEvent", {
    enumerable: !0,
    get: function () {
      return n.SlpStreamEvent;
    },
  }),
  Object.defineProperty(exports, "SlpStreamMode", {
    enumerable: !0,
    get: function () {
      return n.SlpStreamMode;
    },
  }),
  Object.defineProperty(exports, "Stage", {
    enumerable: !0,
    get: function () {
      return n.Stage;
    },
  }),
  (exports.ALL_CRITERIA = Qe),
  (exports.ComboDidKill = ze),
  (exports.ComboFilter = class {
    constructor(e) {
      (this.settings = Object.assign({}, et, e)),
        (this.originalSettings = Object.assign({}, this.settings)),
        (this.criteria = [...Qe]);
    }
    updateSettings(e) {
      return (this.settings = Object.assign({}, this.settings, e)), this.getSettings();
    }
    getSettings() {
      return Object.assign({}, this.settings);
    }
    resetSettings() {
      return this.updateSettings(this.originalSettings);
    }
    isCombo(e, t, r) {
      return tt(this.settings, e, t, r, this.criteria);
    }
  }),
  (exports.DolphinLauncher = class {
    constructor(e) {
      (this.dolphin = null),
        (this.dolphinRunningSource = new t.BehaviorSubject(!1)),
        (this.dolphinRunning$ = this.dolphinRunningSource.asObservable()),
        (this.options = Object.assign({}, bt, e)),
        (this.output = new mt(this.options));
    }
    updateSettings(e) {
      (this.options = Object.assign(this.options, e)), this.output.setBuffer(this.options);
    }
    loadJSON(e) {
      this.dolphin && (this.dolphin.kill(), (this.dolphin = null)),
        (this.dolphin = this._startDolphin(e)),
        this.dolphin.on("exit", (e) => {
          0 !== e && console.warn(`Dolphin terminated with exit code: ${e}`), this.dolphinRunningSource.next(!1);
        }),
        this.dolphin.stdout.pipe(this.output, { end: !1 }),
        this.dolphinRunningSource.next(!0);
    }
    _startDolphin(e) {
      if (!this.options.dolphinPath) throw new Error("Dolphin path is not set!");
      const t = ["-i", e];
      return (
        this.options.meleeIsoPath && t.push("-e", this.options.meleeIsoPath),
        this.options.readEvents && t.push("--cout"),
        this.options.batch && t.push("--batch"),
        this.options.disableSeekBar && t.push("--hide-seekbar"),
        o.spawn(this.options.dolphinPath, t)
      );
    }
  }),
  (exports.DolphinOutput = mt),
  (exports.EventManager = class {
    constructor(e) {
      (this.config$ = new t.ReplaySubject()), (this.realtime = e), (this.events$ = this.setupSubscriptions());
    }
    updateConfig(e) {
      this.config$.next(e);
    }
    setupSubscriptions() {
      return this.config$.pipe(
        me((e) =>
          t.merge(
            ((e, r) => t.merge(gt(r, e.start$), wt(r, e.end$)))(this.realtime.game, e),
            ((e, t) => Lt(t, (t, r) => e.buttonCombo(t, r)))(this.realtime.input, e),
            ((e, r) => t.merge(kt(r, e.playerSpawn$), Gt(r, e.playerDied$)))(this.realtime.stock, e),
            ((e, r) => {
              const n = [
                ...r.events
                  .filter((e) => e.type === exports.ComboEvent.START)
                  .map((t) => Ct(e.start$, t, r.variables).pipe(U((e) => ({ id: t.id, type: t.type, payload: e })))),
                ...r.events
                  .filter((e) => e.type === exports.ComboEvent.EXTEND)
                  .map((t) => Ct(e.extend$, t, r.variables).pipe(U((e) => ({ id: t.id, type: t.type, payload: e })))),
                ...r.events
                  .filter((e) => e.type === exports.ComboEvent.END)
                  .map((t) => {
                    const n = Ct(e.end$, t, r.variables);
                    return Dt(n, t, r.variables).pipe(U((e) => ({ id: t.id, type: t.type, payload: e })));
                  }),
                ...r.events
                  .filter((e) => e.type === exports.ComboEvent.CONVERSION)
                  .map((t) => {
                    const n = Ct(e.conversion$, t, r.variables);
                    return Dt(n, t, r.variables).pipe(U((e) => ({ id: t.id, type: t.type, payload: e })));
                  }),
              ];
              return t.merge(...n);
            })(this.realtime.combo, e),
          ),
        ),
      );
    }
  }),
  (exports.ExcludesCPUs = Xe),
  (exports.ExcludesChainGrabs = Ye),
  (exports.ExcludesLargeSingleHit = qe),
  (exports.ExcludesWobbles = Ke),
  (exports.IsOneVsOne = Ze),
  (exports.MatchesCharacter = He),
  (exports.MatchesPlayerName = $e),
  (exports.MatchesPortNumber = je),
  (exports.RxSlpStream = Yt),
  (exports.SatisfiesMinComboLength = Je),
  (exports.SatisfiesMinComboPercent = Ve),
  (exports.SlpFolderStream = class extends Yt {
    constructor(e, r) {
      super({ ...e, mode: n.SlpStreamMode.MANUAL }, r),
        (this.stopRequested$ = new t.Subject()),
        (this.newFile$ = new t.BehaviorSubject(null)),
        (this.readStream = null),
        (this.fileWatcher = null),
        this._setupSubjects();
    }
    _setupSubjects() {
      this.newFile$.subscribe((e) => {
        e &&
          (this.endReadStream(),
          super.restart(),
          (this.readStream = p.createReadStream(e)),
          this.readStream.pipe(this, { end: !1 }));
      });
    }
    endReadStream() {
      this.readStream && (this.readStream.unpipe(this), this.readStream.done(), (this.readStream = null));
    }
    stopFileWatcher() {
      this.fileWatcher && (this.fileWatcher.close(), (this.fileWatcher = null));
    }
    async start(e, t) {
      this.stopFileWatcher(), this.endReadStream();
      const r = (null == t ? void 0 : t.includeSubfolders) ? "**" : "",
        n = u.join(e, r, "*.slp"),
        o = c.watch(n, { ignored: /(^|[\/\\])\../, persistent: !0, ignoreInitial: !0, ignorePermissionErrors: !0 });
      await new Promise((e) => o.once("ready", e)),
        o.on("add", (e) => {
          this.newFile$.next(e);
        }),
        (this.fileWatcher = o);
    }
    stop() {
      this.stopFileWatcher(), this.endReadStream(), this.stopRequested$.next();
    }
    latestFile() {
      return this.newFile$.value;
    }
  }),
  (exports.SlpLiveStream = class extends Yt {
    constructor(e, t, r) {
      super(t, r),
        (this.connection = "dolphin" === e ? new n.DolphinConnection() : new n.ConsoleConnection()),
        this.connection.on(n.ConnectionEvent.HANDSHAKE, (e) => {
          this.updateSettings({ consoleNickname: e.consoleNickname });
        }),
        this.connection.on(n.ConnectionEvent.DATA, (e) => {
          this.write(e);
        });
    }
    async start(e, t) {
      const r = new Promise((r, o) => {
        const s = (i) => {
          if (i === n.ConnectionStatus.CONNECTED || i === n.ConnectionStatus.DISCONNECTED)
            switch ((this.connection.removeListener(n.ConnectionEvent.STATUS_CHANGE, s), i)) {
              case n.ConnectionStatus.CONNECTED:
                r();
                break;
              case n.ConnectionStatus.DISCONNECTED:
                o(new Error(`Failed to connect to: ${e}:${t}`));
            }
        };
        this.connection.on(n.ConnectionEvent.STATUS_CHANGE, s);
        try {
          this.connection.connect(e, t);
        } catch (e) {
          o(e);
        }
      });
      return Kt(5e3, r);
    }
  }),
  (exports.SlpRealTime = class {
    constructor() {
      (this.stream$ = new t.ReplaySubject()),
        (this.game = new $t(this.stream$)),
        (this.stock = new Wt(this.stream$)),
        (this.input = new Ht(this.stream$)),
        (this.combo = new jt(this.stream$));
    }
    setStream(e) {
      this.stream$.next(e);
    }
  }),
  (exports.UnknownMove = Pe),
  (exports.bitmaskToButtons = ut),
  (exports.checkCombo = tt),
  (exports.defaultComboFilterSettings = et),
  (exports.extractPlayerNames = function (e, t) {
    return Ge(e, t).flat();
  }),
  (exports.extractPlayerNamesByPort = Ge),
  (exports.filterJustSpawned = Ft),
  (exports.filterOnlyFirstFrame = Mt),
  (exports.findWinner = Et),
  (exports.forAllPlayerIndices = St),
  (exports.generateDolphinQueue = vt),
  (exports.generateDolphinQueuePayload = (e, t, r = !0) => {
    const n = vt(e, t),
      o = r ? 2 : void 0;
    return JSON.stringify(n, void 0, o);
  }),
  (exports.generateInputBitmask = at),
  (exports.getAllCharacters = function () {
    return Array.from(Te.values());
  }),
  (exports.getCharacterColorName = function (e, t) {
    return Re(e).colors[t];
  }),
  (exports.getCharacterInfo = Re),
  (exports.getCharacterName = Me),
  (exports.getCharacterShortName = function (e) {
    return Re(e).shortName || Me(e);
  }),
  (exports.getMoveInfo = Ne),
  (exports.getMoveName = function (e) {
    return Ne(e).name;
  }),
  (exports.getMoveShortName = function (e) {
    return Ne(e).shortName;
  }),
  (exports.getStageInfo = Be),
  (exports.getStageName = ke),
  (exports.getStageShortName = function (e) {
    return Be(e).shortName || ke(e);
  }),
  (exports.mapFrameToSpawnStockType = Ot),
  (exports.mapFramesToButtonInputs = Pt),
  (exports.mapFramesToDeathStockType = Nt),
  (exports.namesMatch = Ue),
  (exports.pausable = function (e, t) {
    return (r) => {
      return r.pipe(
        ve(e),
        ((n = () => t),
        function (e) {
          return e.lift(new le(n));
        }),
      );
      var n;
    };
  }),
  (exports.pipeFileContents = async (e, t, r) =>
    new Promise((n) => {
      const o = a.createReadStream(e);
      o.on("open", () => {
        o.pipe(t, r);
      }),
        o.on("close", () => {
          n();
        });
    })),
  (exports.playerFilter = ge),
  (exports.playerFilterMatches = we),
  (exports.playerFrameFilter = Tt),
  (exports.throttleInputButtons = function (e) {
    return (t) => t.pipe(H((t, r) => r.frame < t.frame + e));
  }),
  (exports.withPreviousFrame = Rt);
